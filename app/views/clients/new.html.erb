<% content_for :title, "New Client" %>

<style>
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
  }

  body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    min-height: 100vh;
    margin: 0;
    padding: 1px;
  }

  .modern-container {
    max-width: 800px;
    margin: 20px auto;
    background: white;
    border-radius: 12px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .modern-header {
    background: white;
    padding: 30px 40px;
    border-bottom: 1px solid #e5e7eb;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 20px;
  }

  .modern-header h1 {
    color: #1f2937;
    font-size: 28px;
    font-weight: 600;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .modern-content {
    padding: 40px;
  }

  .modern-form-container {
    background: #f8fafc;
    border-radius: 12px;
    padding: 30px;
    margin-bottom: 30px;
  }

  .form-group {
    margin-bottom: 24px;
  }

  .form-label {
    display: block;
    font-weight: 600;
    color: #374151;
    margin-bottom: 8px;
    font-size: 14px;
    margin-top: 5px;
  }

  .form-control {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 14px;
    transition: all 0.2s ease;
    background: white;
  }

  .form-control:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .form-control:hover {
    border-color: #d1d5db;
  }

  textarea.form-control {
    resize: vertical;
    min-height: 100px;
  }

  select.form-control {
    cursor: pointer;
  }

  .btn {
    padding: 12px 24px;
    border: none;
    margin-top: 32px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    text-align: center;
  }

  .btn:hover {
    transform: translateY(-1px);
    text-decoration: none;
  }

  .btn-primary {
    background: #3b82f6;
    color: white;
  }

  .btn-primary:hover {
    background: #2563eb;
    color: white;
  }

  .btn-secondary {
    background: #6b7280;
    color: white;
  }

  .btn-secondary:hover {
    background: #4b5563;
    color: white;
  }

  .btn-success {
    background: #10b981;
    color: white;
  }

  .btn-success:hover {
    background: #059669;
    color: white;
  }

  .btn-lg {
    padding: 16px 32px;
    font-size: 16px;
  }

  .form-actions {
    display: flex;
    gap: 16px;
    align-items: center;
    flex-wrap: wrap;
    margin-top: 32px;
  }

  .back-link {
    display: flex;
    align-items: center;
    gap: 8px;
    color: #6b7280;
    text-decoration: none;
    font-size: 14px;
    transition: color 0.2s ease;
  }

  .back-link:hover {
    color: #374151;
    text-decoration: none;
  }

  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
  }

  .form-hint {
    font-size: 12px;
    color: #6b7280;
    margin-top: 4px;
  }

  .required {
    color: #ef4444;
  }

  @media (max-width: 768px) {
    .modern-header {
      flex-direction: column;
      text-align: center;
    }

    .modern-content {
      padding: 20px;
    }

    .modern-form-container {
      padding: 20px;
    }

    .form-row {
      grid-template-columns: 1fr;
    }

    .form-actions {
      flex-direction: column;
      align-items: stretch;
    }
  }

  /* Error styling */
  .field_with_errors .form-control {
    border-color: #ef4444;
    box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
  }

  .error-message {
    color: #ef4444;
    font-size: 12px;
    margin-top: 4px;
  }

  .error-explanation {
    background: #fef2f2;
    border: 1px solid #fecaca;
    border-radius: 8px;
    padding: 16px;
    margin-bottom: 24px;
  }

  .error-explanation h2 {
    color: #dc2626;
    font-size: 16px;
    margin-bottom: 8px;
  }

  .error-explanation ul {
    color: #dc2626;
    margin-left: 16px;
  }
</style>

<div class="modern-container">
  <div class="modern-header">
    <h1>üë§ Add New Client</h1>
  </div>

  <div class="modern-content">
    <div class="modern-form-container">
      <%= render "form", client: @client %>
    </div>

    <div class="form-actions">
      <%= link_to clients_path, class: "back-link" do %>
        ‚Üê Back to Clients
      <% end %>
    </div>
  </div>
</div>

<!-- Enhanced form styling for the rendered form partial -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Add modern styling to form elements
    const formInputs = document.querySelectorAll('input, textarea, select');
    formInputs.forEach(input => {
      if (!input.classList.contains('btn')) {
        input.classList.add('form-control');
      }
    });
    
    // Add styling to labels
    const labels = document.querySelectorAll('label');
    labels.forEach(label => {
      label.classList.add('form-label');
    });
    
    // Add styling to submit buttons
    const submitButtons = document.querySelectorAll('input[type="submit"], button[type="submit"]');
    submitButtons.forEach(button => {
      button.classList.add('btn', 'btn-success', 'btn-lg');
      button.style.width = '100%';
      
      // Update button text if it's generic
      if (button.value === 'Create Client' || button.textContent === 'Create Client') {
        if (button.tagName === 'INPUT') {
          button.value = 'Create Client';
        } else {
          button.textContent = 'Create Client';
        }
      }
    });

    // Group form fields
    const formGroups = document.querySelectorAll('.field, .form-group');
    formGroups.forEach(group => {
      group.classList.add('form-group');
    });

    // Style error messages
    const errorMessages = document.querySelectorAll('.error_explanation, #error_explanation');
    errorMessages.forEach(error => {
      error.classList.add('error-explanation');
    });

    // Add icons to common field labels
    const fieldIcons = {
      'name': 'üë§',
      'email': 'üìß',
      'phone': 'üìû',
      'company': 'üè¢',
      'address': 'üìç',
      'notes': 'üìù',
      'client_type': 'üè∑Ô∏è'
    };

    labels.forEach(label => {
      const labelText = label.textContent.toLowerCase().trim();
      for (const [field, icon] of Object.entries(fieldIcons)) {
        if (labelText.includes(field)) {
          label.innerHTML = `${icon} ${label.innerHTML}`;
          break;
        }
      }
    });

    // Add helpful placeholders
    const placeholders = {
      'name': 'Enter client full name',
      'email': 'client@example.com',
      'phone': '+1 (555) 123-4567',
      'company': 'Company name (optional)',
      'address': 'Full address including city, state, zip',
      'notes': 'Any additional notes about this client...'
    };

    formInputs.forEach(input => {
      const inputName = input.name;
      if (inputName) {
        const fieldName = inputName.includes('[') ? 
          inputName.split('[')[1].replace(']', '') : 
          inputName;
        
        if (placeholders[fieldName] && !input.placeholder) {
          input.placeholder = placeholders[fieldName];
        }
      }
    });
  });
</script>
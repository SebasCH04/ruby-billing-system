<div class="invoice-item-fields">
  <div class="row g-2 align-items-end mb-2">
    <div class="col">
      <%= f.label :product_id, "Product" %>
      <%= f.select :product_id,
        options_for_select(
          Product.all.map { |p| [ p.name, p.id, { "data-price" => p.price } ] },
          f.object.product_id
        ),
        { prompt: "Select a product" },
        { class: "form-select product-select" }
      %>
    </div>

    <div class="col">
      <%= f.label :quantity, "Quantity" %>
      <%= f.number_field :quantity, class: "form-control" %>
    </div>

    <div class="col">
      <%= f.label :unit_price, "Unit Price" %>
      <%= f.number_field :unit_price,
                         class: "form-control unit-price",
                         step: "0.01",
                         readonly: true %>
    </div>

    <div class="col-auto">
      <a href="#" class="delete-line" style="color: #0d6efd; text-decoration: underline;">Delete line</a>
      <a href="#" class="add-line" style="color: #10b981; text-decoration: underline; margin-left: 10px;">Add line</a>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      function updateUnitPrice(select) {
        const selectedOption = select.options[select.selectedIndex];
        const price = selectedOption.getAttribute("data-price");
        if (price !== null) {
          const row = select.closest('.row');
          if (row) {
            const priceInput = row.querySelector('.unit-price');
            if (priceInput) {
              priceInput.value = price;
            }
          }
        }
      }

      document.addEventListener('change', function(e) {
        if (e.target && e.target.classList.contains('product-select')) {
          updateUnitPrice(e.target);
        }
      });

      document.querySelectorAll('.product-select').forEach(function(select) {
        updateUnitPrice(select);
      });

      // Delegate add line and delete line to the invoice-items container
      const invoiceItemsDiv = document.getElementById("invoice-items");
      if (invoiceItemsDiv) {
        invoiceItemsDiv.addEventListener("click", function(e) {
          if (e.target && e.target.classList.contains("add-line")) {
            e.preventDefault();
            const currentFields = e.target.closest(".invoice-item-fields");
            if (!currentFields) return;
            const newFields = currentFields.cloneNode(true);
            // Clean values
            newFields.querySelectorAll("input, select").forEach(function(input) {
              if (input.type === "number" || input.type === "text") input.value = "";
              if (input.tagName === "SELECT") input.selectedIndex = 0;
            });
            // Unique indices
            const time = new Date().getTime();
            newFields.innerHTML = newFields.innerHTML.replace(/\[\d+\]/g, `[${time}]`);
            invoiceItemsDiv.appendChild(newFields);
            // Update unit price for the new select
            const newProductSelect = newFields.querySelector('.product-select');
            if (newProductSelect) updateUnitPrice(newProductSelect);
          }
          if (e.target && e.target.classList.contains("delete-line")) {
            e.preventDefault();
            const row = e.target.closest('.invoice-item-fields');
            if (row) {
              // Only remove if more than one line exists
              if (invoiceItemsDiv.querySelectorAll('.invoice-item-fields').length > 1) {
                row.remove();
              }
            }
          }
        });
      }
    });
  </script>
</div>
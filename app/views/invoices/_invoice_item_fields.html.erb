<div class="invoice-item-fields">
  <div class="row g-2 align-items-end mb-2">
    <div class="col">
      <%= f.label :product_id, "Product:" %>
      <%= f.select :product_id,
        options_for_select(
          Product.all.map { |p| [ p.name, p.id, { "data-price" => p.price } ] },
          f.object.product_id
        ),
        { prompt: "Select a product" },
        { class: "form-select product-select" }
      %>
    </div>

    <div class="col">
      <%= f.label :quantity, "Quantity:" %>
      <%= f.number_field :quantity, class: "form-control" %>
    </div>

    <div class="col">
      <%= f.label :unit_price, "Unit Price:" %>
      <%= f.number_field :unit_price,
                         class: "form-control unit-price",
                         step: "0.01",
                         readonly: true %>
    </div>

    <div class="col-auto">
      <a href="#" class="delete-line" style="color: #0d6efd; text-decoration: underline;">Delete line</a>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function() {
      //funcion para actualizar el unit price
      function updateUnitPrice(select) {
        const selectedOption = select.options[select.selectedIndex];
        const price = selectedOption.getAttribute("data-price");
        if (price !== null) {
          const row = select.closest('.row');
          if (row) {
            const priceInput = row.querySelector('.unit-price');
            if (priceInput) {
              priceInput.value = price;
            }
          }
        }
      }

      //delegacion de eventos para selects existentes y futuros
      document.addEventListener('change', function(e) {
        if (e.target && e.target.classList.contains('product-select')) {
          updateUnitPrice(e.target);
        }
      });

      //inicializa los unit price de los selects existentes
      document.querySelectorAll('.product-select').forEach(function(select) {
        updateUnitPrice(select);
      });

      //script para agregar nuevas lineas
      const addLineBtn = document.getElementById("add-line");
      const invoiceItemsDiv = document.getElementById("invoice-items");

      if (addLineBtn && invoiceItemsDiv) {
        addLineBtn.addEventListener("click", function(e) {
          e.preventDefault();

          const lastFields = invoiceItemsDiv.querySelector(".invoice-item-fields:last-child");
          if (!lastFields) return;

          const newFields = lastFields.cloneNode(true);

          //limpia los valores de los inputs/clases
          newFields.querySelectorAll("input, select").forEach(function(input) {
            if (input.type === "number" || input.type === "text") input.value = "";
            if (input.tagName === "SELECT") input.selectedIndex = 0;
          });

          //cambia los indices en los nombres de los campos para que sean unicos
          const time = new Date().getTime();
          newFields.innerHTML = newFields.innerHTML.replace(/\[\d+\]/g, `[${time}]`);

          invoiceItemsDiv.appendChild(newFields);

          //atualiza el unit price del nuevo select
          const newProductSelect = newFields.querySelector('.product-select');
          if (newProductSelect) updateUnitPrice(newProductSelect);
        });
      }

      //script para eliminar lineas
      document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('delete-line')) {
          e.preventDefault();
          const row = e.target.closest('.row');
          if (row) {
            row.remove();
          }
        }
      });
    });
  </script>
</div>